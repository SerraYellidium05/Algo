package com.union;

public class Union {
	private int[] parent;
	private int[] size;
	public UnionFindExampl(int n) {// this intitlses union find structure o N elements
		parent=new int[n];
		size=new int[n];
		for(int i=0;i<n;i++) {
			parent[i]=i;
			size[i]=1;
		}
	}
	private int find(int p) {
		while(p!=parent[p]){//loop continues as long as p is not parent 
			parent[p]=parent[parent[p]];//path compresion by making each node to its grand parent;
		p=parent[p];
		}
		return p;// this returns the node
	}
	public boolean connect(int p,int q) {
		return find(p)==find(q);
	}
	public void Union(int p,int q) {
	int rootp=find(p);
	int rootq=find(q);
	if(rootp==rootq) {
		return ;
	}
	if(size[rootp]<size[rootq]) {//if the size of the component containing p is smaller than size of the component containing q
		parent[rootp]=rootq;// merge the smaller into the larger one making root q as parent to root p
		size[rootq]+=size[rootp];// add the smaller component size to larger one
	}
	else {
		parent[rootq]=rootp;
		size[rootp]+=size[rootq];
	}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=StdIn.readInt();
		UnionFindExampl uf=new UnionFindExampl(n);// create instance of unionfindexampl with n elements
		while(!StdIn.isEmpty()) {
			int p=StdIn.readInt();
			int q=StdIn.readInt();
			if(!uf.connected(p,q)) {
				uf.union(p,q);
				StdOut.println(p+" "+q);
			}
		}
	}

}
